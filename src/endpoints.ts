export const ENDPOINTS: any = { "admin": { "rebuildDescriptionIndexForLanguage": "POST /admin/actions/rebuild-description-index-for-language", "endDonatedContent": "POST /admin/:branch/actions/end-donated-content", "hardDeleteBranch": "DELETE /admin/:branch/actions/hard-delete", "restoreGroupNumberOfInactiveRelationships": "POST /admin/:branch/actions/inactive-relationships-restore-group-number", "rebuildBranchTransitiveClosure": "POST /admin/:branch/actions/rebuild-semantic-index", "rollbackCommit": "POST /admin/:branch/actions/rollback-commit", "updateDefinitionStatuses": "POST /admin/:branch/actions/update-definition-statuses" }, "branching": { "retrieveAllBranches": "GET /branches", "createBranch": "POST /branches", "retrieveBranch": "GET /branches/:path", "updateBranch": "PUT /branches/:path", "lockBranch": "POST /branches/:path/actions/lock", "unlockBranch": "POST /branches/:path/actions/unlock", "retrieveBranchDescendants": "GET /branches/:path/children", "createMergeReview": "POST /merge-reviews", "getMergeReview": "GET /merge-reviews/:id", "applyMergeReview": "POST /merge-reviews/:id/apply", "getMergeReviewConflictingConcepts": "GET /merge-reviews/:id/details", "saveMergeReviewConflictingConcept": "POST /merge-reviews/:id/:conceptId", "deleteMergeReviewConflictingConcept": "DELETE /merge-reviews/:id/:conceptId", "mergeBranch": "POST /merges", "retrieveMerge": "GET /merges/:mergeId", "createBranchReview": "POST /reviews", "getBranchReview": "GET /reviews/:id", "getBranchReviewConceptChanges": "GET /reviews/:id/concept-changes", "integrityCheck": "POST /:branch/integrity-check", "fullIntegrityCheck": "POST /:branch/integrity-check-full" }, "concepts": { "getBrowserConcepts": "POST /browser/:branch/concepts/bulk-load", "createConcept": "POST /browser/:branch/concepts", "createConceptBulkChange": "POST /browser/:branch/concepts/bulk", "getConceptBulkChange": "GET /browser/:branch/concepts/bulk/:bulkChangeId", "findBrowserConcept": "GET /browser/:branch/concepts/:conceptId", "updateConcept": "PUT /browser/:branch/concepts/:conceptId", "findConceptAncestors": "GET /browser/:branch/concepts/:conceptId/ancestors", "findConceptChildren": "GET /browser/:branch/concepts/:conceptId/children", "findConceptParents": "GET /browser/:branch/concepts/:conceptId/parents", "findConcepts": "GET /:branch/concepts", "search": "POST /:branch/concepts/search", "findConcept": "GET /:branch/concepts/:conceptId", "deleteConcept": "DELETE /:branch/concepts/:conceptId", "getConceptAuthoringForm": "GET /:branch/concepts/:conceptId/authoring-form", "findConceptDescendants": "GET /:branch/concepts/:conceptId/descendants", "findConceptDescriptions": "GET /:branch/concepts/:conceptId/descriptions", "findConceptInboundRelationships": "GET /:branch/concepts/:conceptId/inbound-relationships", "getConceptNormalForm": "GET /:branch/concepts/:conceptId/normal-form", "findConceptReferences": "GET /:branch/concepts/:conceptId/references" }, "descriptions": { "findBrowserDescriptions": "GET /browser/:branch/descriptions", "findDescriptions": "GET /:branch/descriptions", "countSemanticTags": "GET /:branch/descriptions/semantictags", "fetchDescription": "GET /:branch/descriptions/:descriptionId", "deleteDescription": "DELETE /:branch/descriptions/:descriptionId" }, "refsetMembers": { "findBrowserReferenceSetMembersWithAggregations": "GET /browser/:branch/members", "findRefsetMembers": "GET /:branch/members", "createMember": "POST /:branch/members", "fetchMember": "GET /:branch/members/:uuid", "updateMember": "PUT /:branch/members/:uuid", "deleteMember": "DELETE /:branch/members/:uuid" }, "validation": { "validateConcept": "POST /browser/:branch/validate/concept", "validateConcepts": "POST /browser/:branch/validate/concepts", "reloadDrools": "POST /validation-maintenance/reload-validation-rules", "findInactiveConceptsWithNoHistoricalAssociationByInactivationType": "GET /:branch/report/inactive-concepts-without-association" }, "codeSystems": { "findAll": "GET /codesystems", "createCodeSystem": "POST /codesystems", "findCodeSystem": "GET /codesystems/:shortName", "updateCodeSystem": "PUT /codesystems/:shortName", "deleteCodeSystem": "DELETE /codesystems/:shortName", "rollbackDailyBuildContent": "POST /codesystems/:shortName/daily-build/rollback", "migrateCodeSystem": "POST /codesystems/:shortName/migrate", "upgradeCodeSystem": "POST /codesystems/:shortName/upgrade", "findAllVersions": "GET /codesystems/:shortName/versions", "createVersion": "POST /codesystems/:shortName/versions" }, "export": { "createExportJob": "POST /exports", "getExportJob": "GET /exports/:exportId", "downloadRf2Archive": "GET /exports/:exportId/archive" }, "import": { "createImportJob": "POST /imports", "createReleasePatchImportJob": "POST /imports/release-patch", "getImportJob": "GET /imports/:importId", "uploadImportRf2Archive": "POST /imports/:importId/archive" }, "mRCM": { "retrieveAttributeValues": "GET /mrcm/:branch/attribute-values/:attributeId", "retrieveDomainAttributes": "GET /mrcm/:branch/domain-attributes" }, "version": { "getBuildInformation": "GET /version" }, "authoringStats": { "getStats": "GET /:branch/authoring-stats", "getChangedFSNs": "GET /:branch/authoring-stats/changed-fully-specified-names", "getInactivatedConcepts": "GET /:branch/authoring-stats/inactivated-concepts", "getInactivatedSynonyms": "GET /:branch/authoring-stats/inactivated-synonyms", "getNewConcepts": "GET /:branch/authoring-stats/new-concepts", "getNewSynonymsOnExistingConcepts": "GET /:branch/authoring-stats/new-synonyms-on-existing-concepts", "getReactivatedConcepts": "GET /:branch/authoring-stats/reactivated-concepts", "getReactivatedSynonyms": "GET /:branch/authoring-stats/reactivated-synonyms" }, "classification": { "findClassifications": "GET /:branch/classifications", "createClassification": "POST /:branch/classifications", "findClassification": "GET /:branch/classifications/:classificationId", "updateClassification": "PUT /:branch/classifications/:classificationId", "getConceptPreview": "GET /:branch/classifications/:classificationId/concept-preview/:conceptId", "getEquivalentConcepts": "GET /:branch/classifications/:classificationId/equivalent-concepts", "getRelationshipChanges": "GET /:branch/classifications/:classificationId/relationship-changes" }, "relationships": { "findRelationships": "GET /:branch/relationships", "fetchRelationship": "GET /:branch/relationships/:relationshipId", "deleteRelationship": "DELETE /:branch/relationships/:relationshipId" } }